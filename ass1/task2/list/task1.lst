     1                                  section	.rodata			; we define (global) read-only variables in .rodata section
     2 00000000 25730A00                	format_string: db "%s", 10, 0	; format string
     3                                  
     4                                  section .bss			; we define (global) uninitialized variables in .bss section
     5 00000000 <res 0000000C>          	an: resb 12			; enough to store integer in [-2,147,483,648 (-2^31) : 2,147,483,647 (2^31-1)]
     6 0000000C <res 00000004>          	strStart: resb 4	; save the start of the string
     7                                  
     8                                  section .data
     9 00000000 00                      	isZero: db 0
    10 00000001 00000000                	acc: dd 0
    11 00000005 00000000                	digitCounter: dd 0
    12                                  
    13                                  section .text
    14                                  	global convertor
    15                                  	extern printf
    16                                  
    17                                  convertor:
    18 00000000 55                      	push ebp
    19 00000001 89E5                    	mov ebp, esp	
    20 00000003 60                      	pushad			
    21                                  
    22 00000004 8B4D08                  	mov ecx, dword [ebp+8]	; get function argument (pointer to string)
    23 00000007 890D[0C000000]          	mov dword [strStart], ecx
    24 0000000D 80390A                  	cmp byte [ecx], 10
    25 00000010 0F84D2000000            	jz EOS
    26 00000016 B800000000              	mov eax, 0
    27 0000001B 8A01                    	mov al, byte [ecx]
    28 0000001D 83E830                  	sub eax, '0'
    29 00000020 C605[00000000]00        	mov byte [isZero], 0
    30 00000027 C705[05000000]0000-     	mov dword [digitCounter], 0
    30 0000002F 0000               
    31                                  	reachLSB:
    32 00000031 FE05[00000000]          		inc byte [isZero]
    33 00000037 41                      		inc ecx
    34 00000038 80390A                  		cmp byte [ecx], 10
    35 0000003B 75F4                    		jnz reachLSB
    36                                  	
    37 0000003D F625[00000000]          	mul byte [isZero]
    38 00000043 BB01000000              	mov ebx, 1
    39 00000048 C705[01000000]0000-     	mov dword [acc], 0
    39 00000050 0000               
    40 00000052 83F820                  	cmp eax, 32
    41 00000055 7409                    	jz negInit
    42                                  
    43                                  	posInit:
    44 00000057 C605[00000000]00        		mov byte [isZero], 0
    45 0000005E EB07                    		jmp accLoop
    46                                  
    47                                  	negInit:
    48 00000060 C605[00000000]01        		mov byte [isZero], 1
    49                                  
    50                                  	accLoop:
    51 00000067 49                      		dec ecx
    52 00000068 802930                  		sub byte [ecx], '0'
    53 0000006B B800000000              		mov eax, 0
    54 00000070 8A01                    		mov al, [ecx]
    55 00000072 F7E3                    		mul ebx
    56 00000074 0105[01000000]          		add dword [acc], eax
    57 0000007A D1E3                    		shl ebx, 1
    58 0000007C 3B0D[0C000000]          		cmp ecx, dword [strStart]
    59 00000082 75E3                    		jnz accLoop
    60                                  	
    61 00000084 803D[00000000]01        	cmp byte [isZero], 1
    62 0000008B 7506                    	jnz posFinal
    63 0000008D F71D[01000000]          	neg dword [acc]
    64                                  	posFinal:
    65                                  	
    66 00000093 A1[01000000]            	mov eax, dword [acc]
    67 00000098 BB0A000000              	mov ebx, 10
    68                                  	digCount:
    69 0000009D FF05[05000000]          		inc dword [digitCounter]
    70 000000A3 BA00000000              		mov edx, 0
    71 000000A8 F7FB                    		idiv ebx
    72 000000AA 83F800                  		cmp eax, 0
    73 000000AD 75EE                    		jnz digCount
    74                                  
    75 000000AF A1[01000000]            	mov eax, dword [acc]	
    76 000000B4 B9[00000000]            	mov ecx, an
    77 000000B9 803D[00000000]01        	cmp byte [isZero], 1
    78 000000C0 7504                    	jnz posString
    79 000000C2 C6012D                  	mov byte [ecx], '-'
    80 000000C5 41                      	inc ecx
    81                                  	posString:
    82 000000C6 030D[05000000]          	add ecx, dword [digitCounter]
    83 000000CC C60100                  	mov byte [ecx], 0
    84 000000CF 49                      	dec ecx
    85                                  	
    86                                  	stringExt:
    87 000000D0 BA00000000              		mov edx, 0
    88 000000D5 F7FB                    		idiv ebx
    89 000000D7 83C230                  		add edx, '0'
    90 000000DA 8811                    		mov byte [ecx], dl
    91 000000DC 49                      		dec ecx
    92 000000DD 83F800                  		cmp eax, 0
    93 000000E0 75EE                    		jnz stringExt
    94                                  	
    95 000000E2 030D[05000000]          	add ecx, dword [digitCounter]
    96                                  	; inc ecx
    97                                  	; mov byte [ecx], 0
    98                                  
    99                                  	EOS:
   100                                  
   101                                  	
   102                                  
   103 000000E8 68[00000000]            	push an			; call printf with 2 arguments -  
   104 000000ED 68[00000000]            	push format_string	; pointer to str and pointer to format string
   105 000000F2 E8(00000000)            	call printf
   106 000000F7 83C408                  	add esp, 8		; clean up stack after call
   107                                  
   108 000000FA 61                      	popad			
   109 000000FB 89EC                    	mov esp, ebp	
   110 000000FD 5D                      	pop ebp
   111 000000FE C3                      	ret
